.box-container {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.box-1 {
    width: 100px;
    height: 100px;
    padding: 20px;
    margin-right: 20px;
    background: #e80dc1;
    box-sizing: border-box; // doesn't include padding in the width and height of the element. hence the element takes more space than 100px.
}

.box-2 {
    width: 100px;
    height: 100px;
    padding: 20px;
    background: #e80dc1;
    box-sizing: content-box; // includes padding in the width and height of the element. the element takes only 100px of the page.
}

.box-selector:nth-child(odd) { // counter could be anything (which starts from 0): 2n, 3n+5, etc.
    background: pink;
}

.box-selector:nth-child(even) {
    background: green;
}

.container {
    display: flex;
    justify-content: center; // aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally). default value: flex-start
    align-items: center; // specifies the default alignment for items inside the flexible container. default value: stretch
    height: 30vh; // 30% of the viewport height
    overflow: hidden;
}

.circle {
    width: 20px;
    height: 20px;
    margin: 10px;
    animation: float 1s infinite cubic-bezier(0.25, 0.1, 0.24, 1.25);
    border-radius: 20px;
}

@keyframes float {
    0% {
        transform: translateY(0px);
    }

    50% {
        transform: translateY(40px);
    }

    100% {
        transform: translateY(0px);
    }
}

// variable
$color: #49b8e5, #1ea7d4, #2a92d0, #3a88c8, #507cbe;

@for $i from 1 through 5 {
    .circle-#{$i} {
        background-color: nth($color, $i);
        animation-delay: 100ms * $i;
    }
}

.circle-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 30vh;
    overflow: hidden;
}

.circles {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    margin: 7px;
    display: flex;
    justify-content: center;
    align-items: center;
    &:before {
        content: "";
        width: 20px;
        height: 20px;
        border-radius: 50%;
        opacity: 0.7;
        animation: scale 2s infinite cubic-bezier(0, 0, 0.49, 1.02)
    }
}

@keyframes scale {
    0% {
        transform: scale(1);
    }

    50%, 75% {
        transform: scale(2.5);
    }

    78%, 100% {
        opacity: 0;
    }
}

// variable
$circlesColor: #926def, #8c6ced, #876beb, #6565dd, #5f64db;

@for $n from 1 through 5 {
    .circles-#{$n} {
        background-color: nth($circlesColor, $n);
        &:before {
            background-color: nth($circlesColor, $n);
            animation-delay: 200ms * $n;
        }
    }
}